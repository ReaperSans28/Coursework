import json
import unittest
from typing import Any
from unittest.mock import patch

from src.services import operation_finder


class TestOperationFinder(unittest.TestCase):
    @patch("src.services.logger")
    def test_operation_finder(self, mock_logger: Any) -> None:
        user_request = "Ozon"
        data = [
            {
                "Дата операции": "31.12.2021 01:23:42",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*5091",
                "Статус": "OK",
                "Сумма операции": -564.00,
                "Валюта операции": "RUB",
                "Сумма платежа": -564.00,
                "Валюта платежа": "RUB",
                "Категория": "Различные товары",
                "MCC": "5399",
                "Описание": "Ozon.ru",
                "Бонусы (включая кэшбэк)": 5.00,
                "Округление на инвесткопилку": 0.00,
                "Сумма операции с округлением": 564.00,
            },
            {
                "Дата операции": "31.10.2018 20:31:00",
                "Дата платежа": "31.10.2018",
                "Номер карты": "*7081",
                "Статус": "OK",
                "Сумма операции": -2018.00,
                "Валюта операции": "RUB",
                "Сумма платежа": -2018.00,
                "Валюта платежа": "RUB",
                "Категория": "Супермаркеты",
                "MCC": "5399",
                "Описание": "Колхоз",
                "Бонусы (включая кэшбэк)": 5.00,
                "Округление на инвесткопилку": 0.00,
                "Сумма операции с округлением": -2013.00,
            },
        ]

        expected_result = [
            {
                "Дата операции": "31.12.2021 01:23:42",
                "Дата платежа": "31.12.2021",
                "Номер карты": "*5091",
                "Статус": "OK",
                "Сумма операции": -564.00,
                "Валюта операции": "RUB",
                "Сумма платежа": -564.00,
                "Валюта платежа": "RUB",
                "Категория": "Различные товары",
                "MCC": "5399",
                "Описание": "Ozon.ru",
                "Бонусы (включая кэшбэк)": 5.00,
                "Округление на инвесткопилку": 0.00,
                "Сумма операции с округлением": 564.00,
            }
        ]

        result = operation_finder(data, user_request)
        self.assertEqual(json.loads(result), expected_result)
        mock_logger.info.assert_called_once_with("Сработала operation_finder.")


if __name__ == "__main__":
    unittest.main()
